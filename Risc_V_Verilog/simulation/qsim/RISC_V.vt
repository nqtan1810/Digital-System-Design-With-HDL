// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2023 11:10:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    instructionMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module instructionMemory_vlg_sample_tst(
	clock,
	readAddress,
	sampler_tx
);
input  clock;
input [9:0] readAddress;
output sampler_tx;

reg sample;
time current_time;
always @(clock or readAddress)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module instructionMemory_vlg_check_tst (
	readData,
	sampler_rx
);
input [31:0] readData;
input sampler_rx;

reg [31:0] readData_expected;

reg [31:0] readData_prev;

reg [31:0] readData_expected_prev;

reg [31:0] last_readData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	readData_prev = readData;
end

// update expected /o prevs

always @(trigger)
begin
	readData_expected_prev = readData_expected;
end


// expected readData[ 31 ]
initial
begin
	readData_expected[31] = 1'bX;
end 
// expected readData[ 30 ]
initial
begin
	readData_expected[30] = 1'bX;
end 
// expected readData[ 29 ]
initial
begin
	readData_expected[29] = 1'bX;
end 
// expected readData[ 28 ]
initial
begin
	readData_expected[28] = 1'bX;
end 
// expected readData[ 27 ]
initial
begin
	readData_expected[27] = 1'bX;
end 
// expected readData[ 26 ]
initial
begin
	readData_expected[26] = 1'bX;
end 
// expected readData[ 25 ]
initial
begin
	readData_expected[25] = 1'bX;
end 
// expected readData[ 24 ]
initial
begin
	readData_expected[24] = 1'bX;
end 
// expected readData[ 23 ]
initial
begin
	readData_expected[23] = 1'bX;
end 
// expected readData[ 22 ]
initial
begin
	readData_expected[22] = 1'bX;
end 
// expected readData[ 21 ]
initial
begin
	readData_expected[21] = 1'bX;
end 
// expected readData[ 20 ]
initial
begin
	readData_expected[20] = 1'bX;
end 
// expected readData[ 19 ]
initial
begin
	readData_expected[19] = 1'bX;
end 
// expected readData[ 18 ]
initial
begin
	readData_expected[18] = 1'bX;
end 
// expected readData[ 17 ]
initial
begin
	readData_expected[17] = 1'bX;
end 
// expected readData[ 16 ]
initial
begin
	readData_expected[16] = 1'bX;
end 
// expected readData[ 15 ]
initial
begin
	readData_expected[15] = 1'bX;
end 
// expected readData[ 14 ]
initial
begin
	readData_expected[14] = 1'bX;
end 
// expected readData[ 13 ]
initial
begin
	readData_expected[13] = 1'bX;
end 
// expected readData[ 12 ]
initial
begin
	readData_expected[12] = 1'bX;
end 
// expected readData[ 11 ]
initial
begin
	readData_expected[11] = 1'bX;
end 
// expected readData[ 10 ]
initial
begin
	readData_expected[10] = 1'bX;
end 
// expected readData[ 9 ]
initial
begin
	readData_expected[9] = 1'bX;
end 
// expected readData[ 8 ]
initial
begin
	readData_expected[8] = 1'bX;
end 
// expected readData[ 7 ]
initial
begin
	readData_expected[7] = 1'bX;
end 
// expected readData[ 6 ]
initial
begin
	readData_expected[6] = 1'bX;
end 
// expected readData[ 5 ]
initial
begin
	readData_expected[5] = 1'bX;
end 
// expected readData[ 4 ]
initial
begin
	readData_expected[4] = 1'bX;
end 
// expected readData[ 3 ]
initial
begin
	readData_expected[3] = 1'bX;
end 
// expected readData[ 2 ]
initial
begin
	readData_expected[2] = 1'bX;
end 
// expected readData[ 1 ]
initial
begin
	readData_expected[1] = 1'bX;
end 
// expected readData[ 0 ]
initial
begin
	readData_expected[0] = 1'bX;
end 
// generate trigger
always @(readData_expected or readData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected readData = %b | ",readData_expected_prev);
	$display("| real readData = %b | ",readData_prev);
`endif
	if (
		( readData_expected_prev[0] !== 1'bx ) && ( readData_prev[0] !== readData_expected_prev[0] )
		&& ((readData_expected_prev[0] !== last_readData_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[0] = readData_expected_prev[0];
	end
	if (
		( readData_expected_prev[1] !== 1'bx ) && ( readData_prev[1] !== readData_expected_prev[1] )
		&& ((readData_expected_prev[1] !== last_readData_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[1] = readData_expected_prev[1];
	end
	if (
		( readData_expected_prev[2] !== 1'bx ) && ( readData_prev[2] !== readData_expected_prev[2] )
		&& ((readData_expected_prev[2] !== last_readData_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[2] = readData_expected_prev[2];
	end
	if (
		( readData_expected_prev[3] !== 1'bx ) && ( readData_prev[3] !== readData_expected_prev[3] )
		&& ((readData_expected_prev[3] !== last_readData_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[3] = readData_expected_prev[3];
	end
	if (
		( readData_expected_prev[4] !== 1'bx ) && ( readData_prev[4] !== readData_expected_prev[4] )
		&& ((readData_expected_prev[4] !== last_readData_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[4] = readData_expected_prev[4];
	end
	if (
		( readData_expected_prev[5] !== 1'bx ) && ( readData_prev[5] !== readData_expected_prev[5] )
		&& ((readData_expected_prev[5] !== last_readData_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[5] = readData_expected_prev[5];
	end
	if (
		( readData_expected_prev[6] !== 1'bx ) && ( readData_prev[6] !== readData_expected_prev[6] )
		&& ((readData_expected_prev[6] !== last_readData_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[6] = readData_expected_prev[6];
	end
	if (
		( readData_expected_prev[7] !== 1'bx ) && ( readData_prev[7] !== readData_expected_prev[7] )
		&& ((readData_expected_prev[7] !== last_readData_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[7] = readData_expected_prev[7];
	end
	if (
		( readData_expected_prev[8] !== 1'bx ) && ( readData_prev[8] !== readData_expected_prev[8] )
		&& ((readData_expected_prev[8] !== last_readData_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[8] = readData_expected_prev[8];
	end
	if (
		( readData_expected_prev[9] !== 1'bx ) && ( readData_prev[9] !== readData_expected_prev[9] )
		&& ((readData_expected_prev[9] !== last_readData_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[9] = readData_expected_prev[9];
	end
	if (
		( readData_expected_prev[10] !== 1'bx ) && ( readData_prev[10] !== readData_expected_prev[10] )
		&& ((readData_expected_prev[10] !== last_readData_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[10] = readData_expected_prev[10];
	end
	if (
		( readData_expected_prev[11] !== 1'bx ) && ( readData_prev[11] !== readData_expected_prev[11] )
		&& ((readData_expected_prev[11] !== last_readData_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[11] = readData_expected_prev[11];
	end
	if (
		( readData_expected_prev[12] !== 1'bx ) && ( readData_prev[12] !== readData_expected_prev[12] )
		&& ((readData_expected_prev[12] !== last_readData_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[12] = readData_expected_prev[12];
	end
	if (
		( readData_expected_prev[13] !== 1'bx ) && ( readData_prev[13] !== readData_expected_prev[13] )
		&& ((readData_expected_prev[13] !== last_readData_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[13] = readData_expected_prev[13];
	end
	if (
		( readData_expected_prev[14] !== 1'bx ) && ( readData_prev[14] !== readData_expected_prev[14] )
		&& ((readData_expected_prev[14] !== last_readData_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[14] = readData_expected_prev[14];
	end
	if (
		( readData_expected_prev[15] !== 1'bx ) && ( readData_prev[15] !== readData_expected_prev[15] )
		&& ((readData_expected_prev[15] !== last_readData_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[15] = readData_expected_prev[15];
	end
	if (
		( readData_expected_prev[16] !== 1'bx ) && ( readData_prev[16] !== readData_expected_prev[16] )
		&& ((readData_expected_prev[16] !== last_readData_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[16] = readData_expected_prev[16];
	end
	if (
		( readData_expected_prev[17] !== 1'bx ) && ( readData_prev[17] !== readData_expected_prev[17] )
		&& ((readData_expected_prev[17] !== last_readData_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[17] = readData_expected_prev[17];
	end
	if (
		( readData_expected_prev[18] !== 1'bx ) && ( readData_prev[18] !== readData_expected_prev[18] )
		&& ((readData_expected_prev[18] !== last_readData_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[18] = readData_expected_prev[18];
	end
	if (
		( readData_expected_prev[19] !== 1'bx ) && ( readData_prev[19] !== readData_expected_prev[19] )
		&& ((readData_expected_prev[19] !== last_readData_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[19] = readData_expected_prev[19];
	end
	if (
		( readData_expected_prev[20] !== 1'bx ) && ( readData_prev[20] !== readData_expected_prev[20] )
		&& ((readData_expected_prev[20] !== last_readData_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[20] = readData_expected_prev[20];
	end
	if (
		( readData_expected_prev[21] !== 1'bx ) && ( readData_prev[21] !== readData_expected_prev[21] )
		&& ((readData_expected_prev[21] !== last_readData_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[21] = readData_expected_prev[21];
	end
	if (
		( readData_expected_prev[22] !== 1'bx ) && ( readData_prev[22] !== readData_expected_prev[22] )
		&& ((readData_expected_prev[22] !== last_readData_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[22] = readData_expected_prev[22];
	end
	if (
		( readData_expected_prev[23] !== 1'bx ) && ( readData_prev[23] !== readData_expected_prev[23] )
		&& ((readData_expected_prev[23] !== last_readData_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[23] = readData_expected_prev[23];
	end
	if (
		( readData_expected_prev[24] !== 1'bx ) && ( readData_prev[24] !== readData_expected_prev[24] )
		&& ((readData_expected_prev[24] !== last_readData_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[24] = readData_expected_prev[24];
	end
	if (
		( readData_expected_prev[25] !== 1'bx ) && ( readData_prev[25] !== readData_expected_prev[25] )
		&& ((readData_expected_prev[25] !== last_readData_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[25] = readData_expected_prev[25];
	end
	if (
		( readData_expected_prev[26] !== 1'bx ) && ( readData_prev[26] !== readData_expected_prev[26] )
		&& ((readData_expected_prev[26] !== last_readData_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[26] = readData_expected_prev[26];
	end
	if (
		( readData_expected_prev[27] !== 1'bx ) && ( readData_prev[27] !== readData_expected_prev[27] )
		&& ((readData_expected_prev[27] !== last_readData_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[27] = readData_expected_prev[27];
	end
	if (
		( readData_expected_prev[28] !== 1'bx ) && ( readData_prev[28] !== readData_expected_prev[28] )
		&& ((readData_expected_prev[28] !== last_readData_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[28] = readData_expected_prev[28];
	end
	if (
		( readData_expected_prev[29] !== 1'bx ) && ( readData_prev[29] !== readData_expected_prev[29] )
		&& ((readData_expected_prev[29] !== last_readData_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[29] = readData_expected_prev[29];
	end
	if (
		( readData_expected_prev[30] !== 1'bx ) && ( readData_prev[30] !== readData_expected_prev[30] )
		&& ((readData_expected_prev[30] !== last_readData_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[30] = readData_expected_prev[30];
	end
	if (
		( readData_expected_prev[31] !== 1'bx ) && ( readData_prev[31] !== readData_expected_prev[31] )
		&& ((readData_expected_prev[31] !== last_readData_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData_expected_prev);
		$display ("     Real value = %b", readData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData_exp[31] = readData_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module instructionMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [9:0] readAddress;
// wires                                               
wire [31:0] readData;

wire sampler;                             

// assign statements (if any)                          
instructionMemory i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.readAddress(readAddress),
	.readData(readData)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// readAddress[ 9 ]
initial
begin
	readAddress[9] = 1'b0;
end 
// readAddress[ 8 ]
initial
begin
	readAddress[8] = 1'b0;
end 
// readAddress[ 7 ]
initial
begin
	readAddress[7] = 1'b0;
end 
// readAddress[ 6 ]
initial
begin
	readAddress[6] = 1'b0;
end 
// readAddress[ 5 ]
initial
begin
	readAddress[5] = 1'b0;
	readAddress[5] = #640000 1'b1;
end 
// readAddress[ 4 ]
initial
begin
	readAddress[4] = 1'b0;
	readAddress[4] = #320000 1'b1;
	readAddress[4] = #320000 1'b0;
	readAddress[4] = #320000 1'b1;
end 
// readAddress[ 3 ]
initial
begin
	repeat(3)
	begin
		readAddress[3] = 1'b0;
		readAddress[3] = #160000 1'b1;
		# 160000;
	end
	readAddress[3] = 1'b0;
end 
// readAddress[ 2 ]
initial
begin
	repeat(6)
	begin
		readAddress[2] = 1'b0;
		readAddress[2] = #80000 1'b1;
		# 80000;
	end
	readAddress[2] = 1'b0;
end 
// readAddress[ 1 ]
initial
begin
	repeat(12)
	begin
		readAddress[1] = 1'b0;
		readAddress[1] = #40000 1'b1;
		# 40000;
	end
	readAddress[1] = 1'b0;
end 
// readAddress[ 0 ]
always
begin
	readAddress[0] = 1'b0;
	readAddress[0] = #20000 1'b1;
	#20000;
end 

instructionMemory_vlg_sample_tst tb_sample (
	.clock(clock),
	.readAddress(readAddress),
	.sampler_tx(sampler)
);

instructionMemory_vlg_check_tst tb_out(
	.readData(readData),
	.sampler_rx(sampler)
);
endmodule

